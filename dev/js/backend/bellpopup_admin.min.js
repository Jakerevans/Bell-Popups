/**
 * JavaScript Admin Functions - bellpopup-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log( 'This is the JavaScript Object that holds all PHP Variables for use in the bellpopup Admin JavaScript file:' );
console.log( bellPopupPhpVariables );

// All functions wrapped in jQuery( document ).ready()...
jQuery( document ).ready( function( $ ) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	bellPopupAdminPointersJavascript();

	// Function that will handle the saving of the user's License Key.
	bellPopupPluginPageDashboardSaveKey();

	// Enables the Select2 library for selecting multiple pages to add a popup to.
	bellPopupEnableSelect2();

	// Function for enabling the 'Upload Files' buttons.
	bellPopupWordPressFileUpload();

	// A Function to save a new popup.
	bellSaveNewPopup();

	//masking();

	function masking(){
		var phoneMask = IMask(
			document.getElementById('bellpopupplugin-form-contactphone'), {
		    mask: '(000) 000-0000'
		});
	}

	// A Function to save a new popup.
	function bellSaveNewPopup(){

		$( '#bellpopupplugin-save-popup-button' ).on( 'click', function() {
			
			var popupname = $('#bellpopupplugin-form-popupname').val();
			var popupdescription = $('#bellpopupplugin-form-popupdescription').val();
			var popuptextblurb = $('#bellpopupplugin-form-popuptextblurb').val();
			var popuplink = $('#bellpopupplugin-form-popuplink').val();
			var popupvideo = $('#bellpopup-input-popupvideo').val();
			var popuptrafficsource = $('#bellpopupplugin-form-popuptrafficsource').val();
			var popuptriggerwhen = $('#bellpopupplugin-form-popuptriggerwhen').val();
			var popuptriggerwhere = $('#bellpopupplugin-form-popuptriggerwhere').val();

			var popuptriggerwherestring = '';
			for (var i = popuptriggerwhere.length - 1; i >= 0; i--) {
				popuptriggerwherestring = popuptriggerwherestring + popuptriggerwhere[i] + ',';
			}

			// Make Ajax call to get display options.
			var data = {
				'action': 'bellpopup_save_new_popup_action',
				'security': bellPopupPhpVariables.adminnonce2,
				'popupname': popupname,
				'popupdescription': popupdescription,
				'popuptextblurb': popuptextblurb,
				'popuplink': popuplink,
				'popupvideo': popupvideo,
				'popuptrafficsource': popuptrafficsource,
				'popuptriggerwhen': popuptriggerwhen,
				'popuptriggerwhere': popuptriggerwherestring,
				
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				//document.location.reload( true );
				console.log(response);

			});
		});


	}

	// Enables the Select2 library for selecting multiple pages to add a popup to.
	function bellPopupEnableSelect2() {

		// Activate the Select2 stuff WITHOUT the option of adding in custom dynamic Option
		$( '#bellpopupplugin-form-popuptriggerwhere' ).select2({
			tags: false
		});
	}

	// Function for enabling the 'Upload Files' buttons.
	function bellPopupWordPressFileUpload() {

		// For the book cover image upload.
		var fileFrame;
		var wpMediaPostId = 0;
		var setToPostId = 0;

		// Must be parsed to an int! All the medwestPhpVariables are strings initially.
		setToPostId = 0;

		$( document ).on( 'click', '.bellpopup-form-section-fields-input-file-upload-button', function( event ) {

			var thisbutton = $( this );
			event.preventDefault();

			// Create the media frame.
			fileFrame = wp.media.frames.fileFrame = wp.media({
				title: 'Upload Supporting Documentation For Your Activity',
				button: {
					text: 'Select This File',
				},
				multiple: false
			});

			// When an image is selected, run a callback.
			fileFrame.on( 'select', function() {

				// We set multiple to false so only get one image from the uploader
				var attachment = fileFrame.state().get( 'selection' ).first().toJSON();

				// Do something with attachment.id and/or attachment.url here
				thisbutton.prev().val( attachment.url );
				thisbutton.prev().prev().attr( 'src', attachment.url );
			});

			// Finally, open the modal
			fileFrame.open();
		});
	}



	// Function that will handle the saving of the user's License Key.
	function bellPopupPluginPageDashboardSaveKey() {

		// When the 'Save' button is clicked at the top of the dashboard...
		$( '#bellpopupplugin-extension-genreric-key-dashboard-form-toplevel' ).on( 'submit', function() {

			var license = $( '#bellpopupplugin-extension-genreric-key-dashboard-input-toplevel' ).val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'bellpopup_save_license_key_action',
				'security': bellPopupPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});


			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});

		// When the 'Save' button is clicked from the plugin's entry...
		$( '#bellpopupplugin-extension-genreric-key-plugins-page-button-toplevel' ).on( 'click', function() {

			var license = $( this ).prev().val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'bellpopup_save_license_key_action',
				'security': bellPopupPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post( ajaxurl, data, function( response ) {

				document.location.reload( true );

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function bellPopupAdminPointersJavascript() {

		$( 'body' ).on( 'mouseenter', '.bellpopupplugin-icon-image-question', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-isbn10':
				pointer = $( this ).pointer({
					content: '<h3>' + bellpopuppluginPhpVariables.trans135 + '</h3><p class="bellpopupplugin-admin-pointer">' + bellpopuppluginPhpVariables.trans173 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer( 'open' );

			// Close the pointer on mouseleave.
			$( 'body' ).on( 'mouseleave', '.bellpopupplugin-icon-image-question', function() {
				pointer.pointer( 'close' );
			});

		});

		$( 'body' ).on( 'mouseenter', '.bellpopupplugin-icon-image-question-with-link', function() {

			var label = $( this ).attr( 'data-label' );
			var pointer;

			// Switch for which admin message to display
			switch ( label ) {
			case 'book-form-libraries':
				pointer = $( this ).pointer({
					content: '<h3>' + bellpopuppluginPhpVariables.trans203 + '</h3><p class="bellpopupplugin-admin-pointer">' + bellpopuppluginPhpVariables.trans204 + bellpopuppluginPhpVariables.SETTINGS_PAGE_URL + bellpopuppluginPhpVariables.trans205 + '.</p>',
					position: {
						edge: 'right',
						align: 'right'
					}
				});
				break;
			default:
			}

			// Open the pointer on mouseenter
			pointer.pointer( 'open' );

		});
	}
});
